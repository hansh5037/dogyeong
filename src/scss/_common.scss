/* reset.css */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
    display: block;
}
body {
    line-height: 1;
	cursor:pointer;
}
ol, ul {
    list-style: none;
}
blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}
table {
    border-collapse: collapse;
    border-spacing: 0;
}

.blind {
	position: absolute !important;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

.common {
	&-fixed {
		&-track {
			position: relative;
		}
		&-inner {
			position: sticky;
			top: 0;
			height: 100dvh;
			overflow: hidden;
		}
	}
	&-cursor {
		@media screen and (min-width: 1024px) {
			position:fixed;
			left:0;
			top:0;
			width: 180px;
			height: 180px;
			pointer-events:none;/*요소가 포인터 이벤트의 대상이 되지 않는다.*/
			transform: translate(-50%,-50%);
			mix-blend-mode: exclusion;
			z-index: 1;
		}
		&-circle {
			position: absolute;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
			width: 130px;
			height: 130px;
			background-color: #E07D9B;
			opacity: .8;
			border:1px solid #E07D9B;
			border-radius:50%;
		}
		&-svg {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 180px;
			height: 180px;
			fill: #cfcfcf;
		}
		&-text {
			font-family: "Noto Sans", sans-serif;
			font-size: 12px;
    		letter-spacing: 1.4px;
			transform-origin: center;
			animation: rotate-text 10s linear infinite;
		}
	}
	&-description {
		font-family: "Noto Sans", sans-serif;
		font-size: 18px;
	}
}
@keyframes rotate-text{
    100% {
        transform: rotate(360deg);
    }
}

@media screen and (min-width: 769px) and (max-width: 1024px) {
	.common {
		&-description {
			font-size: 16px;
		}
	}
}

@media screen and (max-width: 768px) {
	.common {
		&-description {
			font-size: 16px;
			@media screen and (max-width: 534px) {
				font-size: 12px;
			}
		}
	}
}

// vw conversion Mobile
@mixin vw-convert-mo($property, $mo-pixel){
	@if type-of($mo-pixel) == number {
		#{$property}: $mo-pixel/360*768*1px;
		#{$property}: $mo-pixel*100/360*1vw;
		@media (max-width:360px) {
			#{$property}: $mo-pixel*1px;
			#{$property}: $mo-pixel*100/360*1vw;
		}
	}
	@else if type-of($mo-pixel) == string {
		#{$property}: auto;
		@media (max-width:360px) {
			#{$property}: auto;
		}
	}
	@else if type-of($mo-pixel) == list {
		$px: ();
		$vw: ();
		@each $value in $mo-pixel {
			@if type-of($value) == number {
				$px: append($px, $value/360*768*1px);
				$vw: append($vw, $value*100/360*1vw);
			}
			@else if type-of($value) == string {
				$px: append($px, auto);
				$vw: append($vw, auto);
			}
		}
		#{$property}:$px;
		#{$property}:$vw;

		$px: ();
		$vw: ();
		@each $value in $mo-pixel {
			@if type-of($value) == number {
				$px: append($px, $value*1px);
				$vw: append($vw, $value*100/360*1vw);
			}
			@else if type-of($value) == string {
				$px: append($px, auto);
				$vw: append($vw, auto);
			}
		}
		@media (max-width:360px) {
			#{$property}:$px;
			#{$property}:$vw;
		}
	}
}
@mixin vw-font-size-mo($mo-pixel) {
	font-size: $mo-pixel/360*768*1px;
	font-size: $mo-pixel*100/360*1vw;
	@media (max-width:360px) {
		font-size: $mo-pixel*1px;
		font-size: $mo-pixel*100/360*1vw;
	}
}
@mixin mo-img-size($width, $height) {
	@include breakpoint(mobile) {
		img {
			position: absolute;
			top: 0;
			left: 0;
		}
		&::after {
			content: "";
			display: block;
			width: 100%;
			padding-top: (( $height*100 ) / $width ) + 0%;
		}
	}
}
